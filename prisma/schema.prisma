generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Payments {
  id    Int     @id @default(autoincrement())
  value Float
  method String
  identification String
  year Int
  month String
  description String
  created_at DateTime @default(now())

  @@map("payments")
}

model Purposes {
   id    Int     @id @default(autoincrement())
   type_identification String
   identification String
   contractor   Contractors?  @relation(fields: [fk_id_contractor], references: [id])
   fk_id_contractor Int @unique
   @@map("purposes")
}

model Contractors {
  id    Int     @id @default(autoincrement())
  email String  @unique
  first_name  String
  middle_name String?
  last_name  String
  urlProfile String?
  urlDocumentProf String?
  urlPrimaryResidencyProf String?
  urlSecondaryResidencyProf String?
  status Status @default(ACTIVE)
  ein String?
  acceptTerms Boolean
  type String
  identification String
  dob DateTime
  telephone String
  created_at   DateTime @default(now())
  account   Accounts?  @relation(fields: [fk_id_account], references: [id])
  fk_id_account Int? @unique


  purposes Purposes?
  address     Adresseses[]
  contractor_companies     ContractorCompanies[]
  @@map("contractors")
}

model Companies {
  id    Int     @id @default(autoincrement())
  name  String
  created_at   DateTime @default(now())
  account   Accounts?  @relation(fields: [fk_id_account], references: [id])
  fk_id_account Int? @unique
  startHour String
  endHour String
  monday Boolean
  tuesday Boolean
  wednesday Boolean
  thuesday Boolean
  friday Boolean
  satuday Boolean
  sunday Boolean
  contrators     ContractorCompanies[]
  status Boolean @default(true)
  @@map("companies")
}

model Adresseses {
      id    Int     @id @default(autoincrement())
      address  String
      city String
      zipcode String
      state String
      country String
      contractor   Contractors  @relation(fields: [fk_id_contractor], references: [id])
      fk_id_contractor Int
      created_at   DateTime @default(now())
      @@map("addresses")
}

model Accounts {
      id    Int     @id @default(autoincrement())
      access Access
      username String
      password String
      resetPassword Boolean @default(false)
      status Status @default(INACTIVE)
      created_at   DateTime @default(now())
      contractor  Contractors?
      company  Companies?
      @@map("accounts")
}


model ContractorCompanies {
  id    Int     @id @default(autoincrement())
  contractor       Contractors  @relation(fields: [fk_id_contractor], references: [id])
  fk_id_contractor Int
  company       Companies  @relation(fields: [fk_id_company], references: [id])
  fk_id_company Int
  created_at   DateTime @default(now())
  monday Boolean
  tuesday Boolean
  wednesday Boolean
  thuesday Boolean
  friday Boolean
  satuday Boolean
  sunday Boolean
  contractsFort ContractFortnightValue[]
  @@map("contractorCompanies")
}

model ContractFortnightValue {
  id Int  @id @default(autoincrement())
  contractor ContractorCompanies  @relation(fields: [fk_id_contractor_companies], references: [id])
  fk_id_contractor_companies Int
  value_hour Float
  year Int
  month String
  appointments   Appointments[]
  @@map("contractMonthYear")
}

model Appointments {
    id    Int     @id @default(autoincrement())
    date_at DateTime
    value Float
    fortnightValue   ContractFortnightValue  @relation(fields: [fk_id_fort], references: [id])
    created_at   DateTime @default(now())
    fk_id_fort Int
    @@map("appointments")
}

enum Access {
  CONTRACTOR
  COMPANY
  GLOBAL
  ADMIN
}

enum Role {
  CONTRACTOR
  COMPANY
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Method {
  CHECK
  TRANSFER
  VENMO
}