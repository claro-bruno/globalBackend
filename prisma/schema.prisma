generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Orders {
  id                 Int          @id @default(autoincrement())
  start              String
  end                String
  description        String
  notes              String?
  email              String?
  contact            String?
  contact_phone      String?
  address            String?
  type               String?
  support            String?
  isInvoice          Boolean?     @default(false)
  fk_support_id      Int?
  support_contractor Contractors? @relation(fields: [fk_support_id], references: [id])
  collaborators      String?
  client             Clients?     @relation(fields: [fk_id_client], references: [id])
  fk_id_client       Int?
  total_hours        Float?
  created_at         DateTime     @default(now())
  status             Status       @default(PENDING)

  ordersContractors OrdersContractors[]
  Invoices          Invoices?           @relation(fields: [invoicesId], references: [id])
  invoicesId        Int?

  @@map("orders")
}

model OrdersContractors {
  id               Int          @id @default(autoincrement())
  order            Orders?      @relation(fields: [fk_id_order], references: [id])
  fk_id_order      Int
  contractor       Contractors? @relation(fields: [fk_id_contractor], references: [id])
  fk_id_contractor Int
  start            String
  end              String
  total            Float

  @@map("ordersContractors")
}

model Invoices {
  id             Int      @id @default(autoincrement())
  date_at        DateTime @default(now())
  value          Float
  payed_for      String?
  identification String
  description    String?
  month          String
  year           Int

  client       Clients? @relation(fields: [fk_id_client], references: [id])
  fk_id_client Int?
  Orders       Orders[]

  @@map("invoices")
}

model Payments {
  id                  Int                   @id @default(autoincrement())
  value               Float
  others              Float?
  method              Method?
  year                Int
  month               String
  date_at             DateTime              @default(now())
  type                Type
  description         String?
  payed_for           String?
  quarter             Int?
  pay_id              Int?                  @unique
  identification      String                @default("")
  contractor          Contractors?          @relation(fields: [fk_id_contractor], references: [id])
  fk_id_contractor    Int?
  client              Clients?              @relation(fields: [fk_id_client], references: [id])
  fk_id_client        Int?
  status              Status?
  InvoicesContractors InvoicesContractors[]

  @@map("payments")
}

model Balances {
  id    Int    @id @default(autoincrement())
  year  Int
  month String
  value Float

  @@map("balances")
}

model Contractors {
  id                         Int                 @id @default(autoincrement())
  email                      String              @unique
  first_name                 String
  middle_name                String?
  last_name                  String
  urlProfile                 String?
  urlDocumentProof           String?
  urlPrimaryResidencyProof   String?
  urlSecondaryResidencyProof String?
  status                     Status              @default(ACTIVE)
  acceptTerms                Boolean
  identification             String
  dob                        DateTime
  ein                        String?
  telephone                  String
  created_at                 DateTime            @default(now())
  fk_id_account              Int?                @unique
  account                    Accounts?           @relation(fields: [fk_id_account], references: [id])
  fk_id_client_contractor    Int?                @unique
  clientContractor           ClientsContractors? @relation(fields: [fk_id_client_contractor], references: [id])

  ordersSupport     Orders[]
  payments          Payments[]
  address           Adresseses[]
  jobs              Jobs[]
  ordersContractors OrdersContractors[]

  InvoicesContractors InvoicesContractors[]

  @@map("contractors")
}

model ClientsContractors {
  id             Int          @id @default(autoincrement())
  name           String
  created_at     DateTime     @default(now())
  identification String
  phone          String?
  address        String?
  Contractors    Contractors?

  @@map("clients_Contractors")
}

model InvoicesContractors {
  id               Int          @id @default(autoincrement())
  fk_id_payment    Int
  payment          Payments?    @relation(fields: [fk_id_payment], references: [id])
  fk_id_contractor Int
  contractor       Contractors? @relation(fields: [fk_id_contractor], references: [id])
  created_at       DateTime     @default(now())
  month            String
  year             Int
  quarter          Int
  total            Float?

  @@map("invoices_contractor")
}

model Clients {
  id            Int        @id @default(autoincrement())
  name          String
  created_at    DateTime   @default(now())
  account       Accounts?  @relation(fields: [fk_id_account], references: [id])
  fk_id_account Int?       @unique
  start         String     @default("08:00")
  end           String     @default("18:00")
  monday        Boolean    @default(true)
  tuesday       Boolean    @default(true)
  wednesday     Boolean    @default(true)
  thursday      Boolean    @default(true)
  friday        Boolean    @default(true)
  saturday      Boolean    @default(true)
  sunday        Boolean    @default(false)
  contact       String?
  contact_phone String?
  address       String?
  email         String?
  jobs          Jobs[]
  status        Status     @default(ACTIVE)
  payments      Payments[]
  Invoices      Invoices[]
  Orders        Orders[]

  @@map("clients")
}

model Adresseses {
  id               Int         @id @default(autoincrement())
  address          String
  city             String
  zipcode          String
  state            String
  contractor       Contractors @relation(fields: [fk_id_contractor], references: [id])
  fk_id_contractor Int
  created_at       DateTime    @default(now())

  @@map("addresses")
}

model Accounts {
  id            Int          @id @default(autoincrement())
  access        Access
  username      String
  password      String
  resetPassword Boolean      @default(false)
  status        Status       @default(ACTIVE)
  created_at    DateTime     @default(now())
  contractor    Contractors?
  client        Clients?

  @@map("accounts")
}

model Jobs {
  id               Int         @id @default(autoincrement())
  contractor       Contractors @relation(fields: [fk_id_contractor], references: [id])
  fk_id_contractor Int
  client           Clients     @relation(fields: [fk_id_client], references: [id])
  fk_id_client     Int
  created_at       DateTime    @default(now())
  start            String?     @default("08:00")
  end              String?     @default("18:00")
  monday           Boolean?    @default(true)
  tuesday          Boolean?    @default(true)
  wednesday        Boolean?    @default(true)
  thursday         Boolean?    @default(true)
  friday           Boolean?    @default(true)
  saturday         Boolean?    @default(true)
  sunday           Boolean?    @default(false)
  status           Status      @default(ACTIVE)

  quarter Quarters[]

  @@map("jobs")
}

model Quarters {
  id          Int            @id @default(autoincrement())
  jobs        Jobs           @relation(fields: [fk_id_job], references: [id])
  fk_id_job   Int
  value_hour  Float
  year        Int
  month       String
  order       Int
  status      Status         @default(PENDING)
  others      Float          @default(0)
  appointment Appointments[]

  @@map("quarters")
}

model Appointments {
  id            BigInt   @id @default(autoincrement())
  value         Float
  date          DateTime
  quarter       Quarters @relation(fields: [fk_id_quarter], references: [id])
  created_at    DateTime @default(now())
  fk_id_quarter Int

  @@map("appointments")
}

enum Access {
  CONTRACTOR
  CLIENT
  OFFICE
  ADMIN
  DEV
}

enum Role {
  CONTRACTOR
  CLIENT
  OFFICE
}

enum Status {
  REVISED
  ACTIVE
  RECEIPT
  NORECEIPT
  INACTIVE
  PENDING
}

enum Method {
  CHECK
  TRANSFER
  RECEIPT
  VENMO
  CARD
}

enum Type {
  INPUT
  LABOUR_PAYROOL
  VAN_FUEL_OIL
  FUEL_OIL
  EQUIPMENT
  ADVERTISEMENT
  UNIFORM
  REPAIRS_MAINTENANCE
  OFFICE_EXPENSES
  MEALS
  CONTRACTOR
  CONTRACTOR_WORKERS
  CHEMICAL_CONSUMABLES
  INSURANCE_TAX
  EXTRAS
  GLOBAL
}
