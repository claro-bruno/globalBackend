generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Totals {
  id    Int    @id @default(autoincrement())
  day   Int
  month String
  year  Int
  valor Float  @default(0)

  @@map("totals")
}

model Costs {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  vcost      Float

  @@map("costs")
}

model Orders {
  id                 Int                @id @default(autoincrement())
  start              String
  end                String
  description        String
  notes              String?
  email              String?
  contact            String?
  contact_phone      String?
  address            String?
  support            String?
  fk_invoice_id      String?
  fk_support_id      Int?
  collaborators      String?
  fk_id_client       Int?
  total_hours        Float?
  created_at         DateTime           @default(now())
  status             Status             @default(PENDING)
  type               String?
  isInvoice          Boolean            @default(false)
  invoicesId         Int?
  ended_at           DateTime?          @default(now())
  client             Clients?           @relation(fields: [fk_id_client], references: [id])
  support_contractor Contractors?       @relation(fields: [fk_support_id], references: [id])
  ordersContractors  OrderContractors[]
  invoices           Invoices[]

  @@map("orders")
}

model OrderContractors {
  id               Int         @id @default(autoincrement())
  fk_id_order      Int
  fk_id_contractor Int
  end              String
  start            String
  total            Float
  created_at       DateTime?   @default(now())
  contractor       Contractors @relation(fields: [fk_id_contractor], references: [id])
  order            Orders      @relation(fields: [fk_id_order], references: [id])

  @@map("ordersContractors")
}

model Invoices {
  id               Int       @id @default(autoincrement())
  date_at          DateTime  @default(now())
  value            Float
  identification   String
  description      String?
  month            String
  year             Int
  taxa             Float?
  total            Float?
  total_pago       Float?
  date_payment     DateTime?
  method           String?
  ref              String?
  fk_id_order      Int?
  fk_id_client     Int?
  fk_id_contractor Int?
  quarter          Int?
  date_log         DateTime? @default(now())

  client     Clients?     @relation(fields: [fk_id_client], references: [id])
  order      Orders?      @relation(fields: [fk_id_order], references: [id])
  contractor Contractors? @relation(fields: [fk_id_contractor], references: [id])

  @@map("invoices")
}

model Payments {
  id                  Int                   @id @default(autoincrement())
  value               Float
  others              Float?
  method              Method?
  year                Int
  month               String
  date_at             DateTime              @default(now())
  type                Type
  description         String?
  payed_for           String?
  quarter             Int?
  pay_id              Int?
  identification      String                @default("")
  fk_id_contractor    Int?
  fk_id_client        Int?
  status              Status?
  InvoicesContractors InvoicesContractors[]
  client              Clients?              @relation(fields: [fk_id_client], references: [id])
  contractor          Contractors?          @relation(fields: [fk_id_contractor], references: [id])

  @@map("payments")
}

model Balances {
  id    Int    @id @default(autoincrement())
  year  Int
  month String
  value Float

  @@map("balances")
}

model Contractors {
  id                         Int                   @id @default(autoincrement())
  email                      String                @unique
  first_name                 String
  middle_name                String?
  last_name                  String
  urlProfile                 String?
  urlDocumentProof           String?
  urlPrimaryResidencyProof   String?
  urlSecondaryResidencyProof String?
  status                     Status                @default(ACTIVE)
  acceptTerms                Boolean
  identification             String
  dob                        DateTime
  telephone                  String
  created_at                 DateTime              @default(now())
  fk_id_account              Int?                  @unique
  fk_id_client_contractor    Int?
  ein                        String?
  type_pay                   String?
  address                    Adresseses[]
  account                    Accounts?             @relation(fields: [fk_id_account], references: [id])
  clientContractor           ClientsContractors?   @relation(fields: [fk_id_client_contractor], references: [id])
  InvoicesContractors        InvoicesContractors[]
  jobs                       Jobs[]
  ordersSupport              Orders[]
  ordersContractors          OrderContractors[]
  payments                   Payments[]
  paymentsContractors        paymentsContractors[]
  Invoices                   Invoices[]

  @@map("contractors")
}

model ClientsContractors {
  id                  Int                   @id @default(autoincrement())
  name                String
  created_at          DateTime              @default(now())
  identification      String
  phone               String?
  address             String?
  status              Status                @default(ACTIVE)
  Contractors         Contractors[]
  InvoicesContractors InvoicesContractors[]

  @@map("clients_contractor")
}

model InvoicesContractors {
  id                      Int                @id @default(autoincrement())
  fk_id_payment           Int
  fk_id_contractor        Int
  created_at              DateTime           @default(now())
  month                   String
  year                    Int
  quarter                 Int
  total                   Float?
  fk_id_contractor_client Int
  clientsContractor       ClientsContractors @relation(fields: [fk_id_contractor_client], references: [id])
  contractor              Contractors        @relation(fields: [fk_id_contractor], references: [id])
  payment                 Payments           @relation(fields: [fk_id_payment], references: [id])

  @@map("invoices_contractor")
}

model Clients {
  id            Int        @id @default(autoincrement())
  name          String
  created_at    DateTime   @default(now())
  fk_id_account Int?       @unique
  start         String     @default("08:00")
  end           String     @default("18:00")
  monday        Boolean    @default(true)
  tuesday       Boolean    @default(true)
  wednesday     Boolean    @default(true)
  thursday      Boolean    @default(true)
  friday        Boolean    @default(true)
  saturday      Boolean    @default(true)
  sunday        Boolean    @default(false)
  contact       String?
  contact_phone String?
  address       String?
  email         String?
  status        Status     @default(ACTIVE)
  account       Accounts?  @relation(fields: [fk_id_account], references: [id])
  Invoices      Invoices[]
  Orders        Orders[]
  payments      Payments[]
  Jobs          Jobs[]

  @@map("clients")
}

model Adresseses {
  id               Int         @id @default(autoincrement())
  address          String
  city             String
  zipcode          String
  state            String
  fk_id_contractor Int
  created_at       DateTime    @default(now())
  contractor       Contractors @relation(fields: [fk_id_contractor], references: [id])

  @@map("addresses")
}

model Accounts {
  id            Int          @id @default(autoincrement())
  access        Access
  username      String
  password      String
  resetPassword Boolean      @default(false)
  status        Status       @default(ACTIVE)
  created_at    DateTime     @default(now())
  client        Clients?
  contractor    Contractors?

  @@map("accounts")
}

model Jobs {
  id               Int         @id @default(autoincrement())
  fk_id_contractor Int
  contractor       Contractors @relation(fields: [fk_id_contractor], references: [id])
  fk_id_client     Int
  client           Clients     @relation(fields: [fk_id_client], references: [id])
  created_at       DateTime    @default(now())
  start            String?     @default("08:00")
  end              String?     @default("18:00")
  monday           Boolean?    @default(true)
  tuesday          Boolean?    @default(true)
  wednesday        Boolean?    @default(true)
  thursday         Boolean?    @default(true)
  friday           Boolean?    @default(true)
  saturday         Boolean?    @default(true)
  sunday           Boolean?    @default(false)
  status           Status      @default(ACTIVE)
  Quarters         Quarters[]

  @@map("jobs")
}

model Quarters {
  id          Int            @id @default(autoincrement())
  fk_id_job   Int
  jobs        Jobs           @relation(fields: [fk_id_job], references: [id])
  value_hour  Float
  year        Int
  month       String
  order       Int
  status      Status         @default(PENDING)
  others      Float          @default(0)
  appointment Appointments[]

  @@map("quarters")
}

model Appointments {
  id            BigInt    @id @default(autoincrement())
  value         Float
  date          DateTime
  created_at    DateTime  @default(now())
  fk_id_quarter Int
  Quarters      Quarters? @relation(fields: [fk_id_quarter], references: [id])

  @@map("appointments")
}

model paymentsContractors {
  id               Int          @id @default(autoincrement())
  value            Float
  others           Float?
  method           Method?
  year             Int
  month            String
  date_at          DateTime     @default(now())
  type             Type
  description      String?
  quarter          Int?
  identification   String?      @default("")
  fk_id_contractor Int?
  status           Status?
  payed            Int?         @default(0)
  contractors      Contractors? @relation(fields: [fk_id_contractor], references: [id])
}

enum Access {
  CONTRACTOR
  CLIENT
  OFFICE
  ADMIN
  DEV
}

enum Role {
  CONTRACTOR
  CLIENT
  OFFICE
}

enum Status {
  REVISED
  ACTIVE
  RECEIPT
  NORECEIPT
  INACTIVE
  PENDING
}

enum Method {
  CHECK
  TRANSFER
  RECEIPT
  VENMO
  CARD
  CASH
}

enum Type {
  INPUT
  LABOUR_PAYROOL
  VAN_FUEL_OIL
  FUEL_OIL
  EQUIPMENT
  ADVERTISEMENT
  UNIFORM
  REPAIRS_MAINTENANCE
  OFFICE_EXPENSES
  MEALS
  CONTRACTOR
  CONTRACTOR_WORKERS
  CHEMICAL_CONSUMABLES
  INSURANCE_TAX
  EXTRAS
  GLOBAL
  MISC
  MONEYBACK
}
